//------------------------------------------------------------------------------
// <auto-generated>
//     這個程式碼是由範本產生。
//
//     對這個檔案進行手動變更可能導致您的應用程式產生未預期的行為。
//     如果重新產生程式碼，將會覆寫對這個檔案的手動變更。
// </auto-generated>
//------------------------------------------------------------------------------

namespace webapitest1.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AIGContext : DbContext
    {
        public AIGContext()
            : base("name=AIGContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AcLogoutLog> AcLogoutLog { get; set; }
        public virtual DbSet<APPFORM_EXTEN> APPFORM_EXTEN { get; set; }
        public virtual DbSet<Authority> Authority { get; set; }
        public virtual DbSet<DbSaveError> DbSaveError { get; set; }
        public virtual DbSet<EdsLogoutLog> EdsLogoutLog { get; set; }
        public virtual DbSet<FlatFile> FlatFile { get; set; }
        public virtual DbSet<FlatFileTemp> FlatFileTemp { get; set; }
        public virtual DbSet<ManualCheckLog> ManualCheckLog { get; set; }
        public virtual DbSet<PolicyAc> PolicyAc { get; set; }
        public virtual DbSet<PolicyAc_Eds> PolicyAc_Eds { get; set; }
        public virtual DbSet<PolicyD> PolicyD { get; set; }
        public virtual DbSet<ProductType> ProductType { get; set; }
        public virtual DbSet<Sales> Sales { get; set; }
        public virtual DbSet<SalesChangePasswordLog> SalesChangePasswordLog { get; set; }
        public virtual DbSet<ScheduleRunLog> ScheduleRunLog { get; set; }
        public virtual DbSet<SidebarMain> SidebarMain { get; set; }
        public virtual DbSet<SidebarSub> SidebarSub { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<SysLog> SysLog { get; set; }
        public virtual DbSet<T_AML_PLCY_wk> T_AML_PLCY_wk { get; set; }
        public virtual DbSet<TPRODUCT> TPRODUCT { get; set; }
        public virtual DbSet<TrackLog> TrackLog { get; set; }
        public virtual DbSet<TTW_APPLEAPPFORM_DEVICE_PREM_INFO> TTW_APPLEAPPFORM_DEVICE_PREM_INFO { get; set; }
        public virtual DbSet<TTW_APPLEAPPFORM_DEVICE_PREM_INFO_copy1> TTW_APPLEAPPFORM_DEVICE_PREM_INFO_copy1 { get; set; }
        public virtual DbSet<TTW_APPLEAPPFORMNATIONALITY> TTW_APPLEAPPFORMNATIONALITY { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<UserChangePasswordLog> UserChangePasswordLog { get; set; }
        public virtual DbSet<UserForgetLog> UserForgetLog { get; set; }
        public virtual DbSet<UserLoginLog> UserLoginLog { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_CheckPwEditDays()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CheckPwEditDays");
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_DelSysLog()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DelSysLog");
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_getBillingEdsList_Result> sp_getBillingEdsList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getBillingEdsList_Result>("sp_getBillingEdsList");
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_PushForgetLog(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PushForgetLog", idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_SetLogoutStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SetLogoutStatus");
        }
    
        public virtual ObjectResult<Nullable<int>> sp_syn_APPFORM_EXTEN()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_syn_APPFORM_EXTEN");
        }
    
        public virtual int sp_UpdateAC_Combine()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateAC_Combine");
        }
    
        public virtual int sp_UpdateAC_Eds_Combine()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateAC_Eds_Combine");
        }
    
        public virtual int sp_UpdateContractPolicy()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateContractPolicy");
        }
    
        public virtual int sp_UpdateVO_Canel_dt()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateVO_Canel_dt");
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
